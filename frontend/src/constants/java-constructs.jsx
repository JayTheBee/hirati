// eslint-disable-next-line no-unused-vars
const reservedJava = [
  { value: 'if', category: 'control flow' },
  { value: 'else', category: 'control flow' },
  { value: 'switch', category: 'control flow' },
  { value: 'case', category: 'control flow' },
  { value: 'default', category: 'control flow' },
  { value: 'while', category: 'control flow' },
  { value: 'do', category: 'control flow' },
  { value: 'for', category: 'control flow' },
  { value: 'break', category: 'control flow' },
  { value: 'continue', category: 'control flow' },
  { value: 'return', category: 'control flow' },
  { value: 'class', category: 'object-oriented' },
  { value: 'interface', category: 'object-oriented' },
  { value: 'extends', category: 'object-oriented' },
  { value: 'implements', category: 'object-oriented' },
  { value: 'new', category: 'object-oriented' },
  { value: 'this', category: 'object-oriented' },
  { value: 'super', category: 'object-oriented' },
  { value: 'abstract', category: 'object-oriented' },
  { value: 'final', category: 'object-oriented' },
  { value: 'static', category: 'object-oriented' },
  { value: 'private', category: 'object-oriented' },
  { value: 'protected', category: 'object-oriented' },
  { value: 'public', category: 'object-oriented' },
  { value: 'boolean', category: 'data types' },
  { value: 'byte', category: 'data types' },
  { value: 'short', category: 'data types' },
  { value: 'int', category: 'data types' },
  { value: 'long', category: 'data types' },
  { value: 'float', category: 'data types' },
  { value: 'double', category: 'data types' },
  { value: 'char', category: 'data types' },
  { value: 'try', category: 'exception handling' },
  { value: 'catch', category: 'exception handling' },
  { value: 'finally', category: 'exception handling' },
  { value: 'throw', category: 'exception handling' },
  { value: 'throws', category: 'exception handling' }];

export default reservedJava;
