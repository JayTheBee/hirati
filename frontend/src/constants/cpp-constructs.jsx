// eslint-disable-next-line no-unused-vars
const reservedCPP = [{ value: 'int', category: 'data type' },
  { value: 'double', category: 'data type' },
  { value: 'char', category: 'data type' },
  { value: 'bool', category: 'data type' },
  { value: 'float', category: 'data type' },
  { value: 'if', category: 'control flow' },
  { value: 'else', category: 'control flow' },
  { value: 'switch', category: 'control flow' },
  { value: 'case', category: 'control flow' },
  { value: 'default', category: 'control flow' },
  { value: 'while', category: 'control flow' },
  { value: 'do', category: 'control flow' },
  { value: 'for', category: 'control flow' },
  { value: 'break', category: 'control flow' },
  { value: 'continue', category: 'control flow' },
  { value: 'return', category: 'control flow' },
  { value: 'void', category: 'functions' },
  { value: 'auto', category: 'functions' },
  { value: 'const', category: 'functions' },
  { value: 'static', category: 'functions' },
  { value: 'inline', category: 'functions' },
  { value: 'extern', category: 'functions' },
  { value: 'register', category: 'functions' },
  { value: 'virtual', category: 'functions' },
  { value: 'class', category: 'object-oriented' },
  { value: 'public', category: 'object-oriented' },
  { value: 'private', category: 'object-oriented' },
  { value: 'protected', category: 'object-oriented' },
  { value: 'friend', category: 'object-oriented' },
  { value: 'virtual', category: 'object-oriented' },
  { value: 'new', category: 'object-oriented' },
  { value: 'delete', category: 'object-oriented' },
  { value: 'this', category: 'object-oriented' },
  { value: 'new', category: 'memory management' },
  { value: 'delete', category: 'memory management' },
  { value: 'try', category: 'exception handling' },
  { value: 'catch', category: 'exception handling' },
  { value: 'throw', category: 'exception handling' },
  { value: 'const', category: 'modifiers' },
  { value: 'volatile', category: 'modifiers' },
  { value: 'mutable', category: 'modifiers' },
  { value: 'explicit', category: 'modifiers' },
  { value: 'namespace', category: 'namespace' },
  { value: 'template', category: 'namespace' },
  { value: 'typename', category: 'namespace' },
  { value: 'class', category: 'namespace' },
  { value: 'const', category: 'type qualifier' },
  { value: 'volatile', category: 'type qualifier' },
  { value: 'mutable', category: 'type qualifier' }];

export default reservedCPP;
